=encoding utf8

=head1 NAME

nbdkit - A toolkit for creating NBD servers

=head1 SYNOPSIS

 nbdkit [-e EXPORTNAME] [--exit-with-parent] [-f]
        [--filter=FILTER ...] [-g GROUP] [-i IPADDR]
        [--newstyle] [--oldstyle] [-P PIDFILE] [-p PORT] [-r]
        [--run CMD] [-s] [--selinux-label LABEL] [-t THREADS]
        [--tls=off|on|require] [--tls-certificates /path/to/certificates]
        [--tls-verify-peer]
        [-U SOCKET] [-u USER] [-v] [-V]
        PLUGIN [key=value [key=value [...]]]

 nbdkit --dump-config

 nbdkit PLUGIN --dump-plugin

=head1 DESCRIPTION

Network Block Device (NBD) is a network protocol for accessing block
devices over the network.  Block devices are hard disks and things
that behave like hard disks such as disk images and virtual machines.

C<nbdkit> is both a toolkit for creating NBD servers from
"unconventional" sources and the name of an NBD server.

To create a new Network Block Device source, all you need to do is
write a few glue functions, possibly in C, or perhaps in a high level
language like Perl or Python.  The liberal licensing of nbdkit is
meant to allow you to link nbdkit with proprietary libraries or to
include nbdkit in proprietary code.

If you want to write an nbdkit plugin, you should read
L<nbdkit-plugin(3)>.

Several plugins may be found in C<$libdir/nbdkit/plugins>.  You can
give the full path to the plugin, like this:

 nbdkit $libdir/nbdkit/plugins/nbdkit-file-plugin.so [...]

but it is usually more convenient to use this equivalent syntax:

 nbdkit file [...]

C<$libdir> is set at compile time.  To print it out, do:

 nbdkit --dump-config

=head1 EXAMPLES

=head2 Basic file serving

Serve file F<disk.img> on port 10809 using L<nbdkit-file-plugin(1)>:

 nbdkit file file=disk.img

Run the L<nbdkit-example3-plugin(1)> and connect to it using
L<guestfish(1)>:

 nbdkit example3 size=1G
 guestfish --ro --format=raw -a nbd://localhost

Serve file F<disk.img> on port 10809, requiring clients to use
encrypted (TLS) connections:

 nbdkit --newstyle --tls=require file file=disk.img

=head2 Combining plugins and filters

Serve only the first partition from compressed disk image
F<disk.img.xz>, combining L<nbdkit-xz-plugin(1)> and
L<nbdkit-partition-filter(1)>:

                     plugin name and plugin parameter
                                  │
                            ┌─────┴────┐
                            │          │
 nbdkit --filter=partition  xz file=disk.img.xz  partition=1
                │                                   │
                └───────────────┬───────────────────┘
                                │
                filter name and filter parameter

=head2 Display information

Display information about nbdkit or a specific plugin:

 nbdkit --help
 nbdkit --version
 nbdkit --dump-config
 nbdkit example1 --help
 nbdkit example1 --dump-plugin

=head1 GLOBAL OPTIONS

=over 4

=item B<--help>

Display brief command line usage information and exit.

=item B<--dump-config>

Dump out the compile-time configuration values and exit.
See L</PROBING CONFIGURATION AND PLUGINS> below.

=item B<--dump-plugin>

Dump out information about the plugin and exit.
See L</PROBING CONFIGURATION AND PLUGINS> below.

=item B<--exit-with-parent>

If the parent process exits, we exit.  This can be used to avoid
complicated cleanup or orphaned nbdkit processes.  There are some
important caveats with this, see L</EXIT WITH PARENT> below.  An
alternative to this is L</CAPTIVE NBDKIT> described below.

This option implies I<--foreground>.

=item B<-e> EXPORTNAME

=item B<--export> EXPORTNAME

=item B<--export-name> EXPORTNAME

=item B<--exportname> EXPORTNAME

Set the exportname and use the newstyle protocol (implies I<-n>).

If not set, exportname C<""> (empty string) is used.  Exportnames are
not allowed with the oldstyle protocol.

=item B<-f>

=item B<--foreground>

=item B<--no-fork>

I<Don't> fork into the background.

=item B<--filter> FILTER

Add a filter before the plugin.  This option may be given one or more
times to stack filters in front of the plugin.  They are processed in
the order they appear on the command line.  See L</FILTERS> and
L<nbdkit-filter(3)>.

=item B<-g> GROUP

=item B<--group> GROUP

Change group to C<GROUP> after starting up.  A group name or numeric
group ID can be used.

The server needs sufficient permissions to be able to do this.
Normally this would mean starting the server up as root.

See also I<-u>.

=item B<-i> IPADDR

=item B<--ip-addr> IPADDR

=item B<--ipaddr> IPADDR

Listen on the specified interface.  The default is to listen on all
interfaces.  See also I<-p>.

=item B<-n>

=item B<--new-style>

=item B<--newstyle>

Use the newstyle NBD protocol instead of the default (oldstyle)
protocol.  See L</NEW STYLE VS OLD STYLE PROTOCOL> below.

=item B<-o>

=item B<--old-style>

=item B<--oldstyle>

Use the oldstyle NBD protocol.  This is currently the default (unless
you use I<-n> or I<-e>), so this flag does nothing, but it is possible
we might change the default protocol in future.  See L</NEW STYLE VS
OLD STYLE PROTOCOL> below.

=item B<-P> PIDFILE

=item B<--pid-file> PIDFILE

=item B<--pidfile> PIDFILE

Write C<PIDFILE> (containing the process ID of the server) after
nbdkit becomes ready to accept connections.

If the file already exists, it is overwritten.  nbdkit I<does not>
delete the file when it exits.

=item B<-p> PORT

=item B<--port> PORT

Change the TCP/IP port number on which nbdkit serves requests.
The default is C<10809>.  See also I<-i>.

=item B<-r>

=item B<--read-only>

=item B<--readonly>

The export will be read-only.  If a client writes, then it will get an
error.

Note that some plugins inherently don't support writes.  With those
plugins the I<-r> option is added implicitly.

L<nbdkit-cow-filter(1)> can be placed over read-only plugins to
provide copy-on-write (or "snapshot") functionality.  If you are using
qemu as a client then it also supports snapshots.

=item B<--run> CMD

Run nbdkit as a captive subprocess of C<CMD>.  When C<CMD> exits,
nbdkit is killed.  See L</CAPTIVE NBDKIT> below.

This option implies I<--foreground>.

=item B<-s>

=item B<--single>

=item B<--stdin>

Don't fork.  Handle a single NBD connection on stdin/stdout.  After
stdin closes, the server exits.

You can use this option to run nbdkit from inetd or similar
superservers; or just for testing; or if you want to run nbdkit in a
non-conventional way.  Note that if you want to run nbdkit from
systemd, then it may be better to use L</SOCKET ACTIVATION> instead of
this option.

This option implies I<--foreground>.

=item B<--selinux-label> SOCKET-LABEL

Apply the SELinux label C<SOCKET-LABEL> to the nbdkit listening
socket.

The common — perhaps only — use of this option is to allow libvirt
guests which are using SELinux and sVirt confinement to access nbdkit
Unix domain sockets:

 nbdkit --selinux-label system_u:object_r:svirt_t:s0 ...

=item B<-t> THREADS

=item B<--threads> THREADS

Set the number of threads to be used per connection, which in turn
controls the number of outstanding requests that can be processed at
once.  Only matters for plugins with thread_model=parallel (where it
defaults to 16).  To force serialized behavior (useful if the client
is not prepared for out-of-order responses), set this to 1.

=item B<--tls=off>

=item B<--tls=on>

=item B<--tls=require>

Disable, enable or require TLS (authentication and encryption
support).  See L</TLS> below.

=item B<--tls-certificates> /path/to/certificates

Set the path to the TLS certificates directory.  If not specified,
some built-in paths are checked.  See L</TLS> below for more details.

=item B<--tls-verify-peer>

Enables TLS client certificate verification.  The default is I<not> to
check the client's certificate.

=item B<-U> SOCKET

=item B<--unix> SOCKET

=item B<-U ->

=item B<--unix ->

Accept connections on the Unix domain socket C<SOCKET> (which is a
path).

nbdkit creates this socket, but it will probably have incorrect
permissions (too permissive).  If it is a problem that some
unauthorized user could connect to this socket between the time that
nbdkit starts up and the authorized user connects, then put the socket
into a directory that has restrictive permissions.

nbdkit does B<not> delete the socket file when it exits.  The caller
should delete the socket file after use (else if you try to start
nbdkit up again you will get an C<Address already in use> error).

If the socket name is I<-> then nbdkit generates a randomly named
private socket.  This is useful with L</CAPTIVE NBDKIT>.

=item B<-u> USER

=item B<--user> USER

Change user to C<USER> after starting up.  A user name or numeric user
ID can be used.

The server needs sufficient permissions to be able to do this.
Normally this would mean starting the server up as root.

See also I<-g>.

=item B<-v>

=item B<--verbose>

Enable verbose messages.

It's a good idea to use I<-f> as well so the process does not fork
into the background (but not required).

=item B<-V>

=item B<--version>

Print the version number of nbdkit and exit.

=back

=head1 PLUGIN CONFIGURATION

After specifying the plugin name you can (optionally, it depends
on the plugin) give plugin configuration on the command line in
the form of C<key=value>.  For example:

 nbdkit file file=disk.img

To list all the options supported by a plugin, do:

 nbdkit --help file

To dump information about a plugin, do:

 nbdkit file --dump-plugin

=head2 Magic script parameter

As a special case, if the first plugin argument does not contain an
C<'='> character then it is assumed to be C<script=value>.

That allows scripting language plugins like L<nbdkit-perl-plugin(1)>
to do:

 nbdkit perl foo.pl [args...]

which has the same meaning as:

 nbdkit perl script=foo.pl [args...]

=head2 Shebang scripts

You can use C<#!> to run nbdkit plugins written in most scripting
languages.  The file should be executable.  For example:

 #!/usr/sbin/nbdkit perl
 sub open {
   # etc
 }

(see L<nbdkit-perl-plugin(3)> for a full example).

=head1 FILTERS

One or more filters can be placed in front of an nbdkit plugin to
modify the behaviour of the plugin, using the I<--filter> parameter.
Filters can be used for example to limit requests to an offset/limit,
add copy-on-write support, or inject delays or errors (for testing).

Several existing filters are available in the C<$filterdir>.  Use
C<nbdkit --dump-config> to find the directory name.

How to write filters is described in L<nbdkit-filter(3)>.

=head1 SOCKET ACTIVATION

nbdkit supports socket activation (sometimes called systemd socket
activation).  This is a simple protocol where instead of nbdkit itself
opening the listening socket(s), the parent process (typically
systemd) passes in pre-opened file descriptors.  Socket activation
lets you serve infrequent NBD requests using a superserver without
needing nbdkit to be running the whole time.

Socket activation is triggered when both the C<LISTEN_FDS> and
C<LISTEN_PID> environment variables are set.  In this mode using
I<-i>, I<-p>, I<--run>, I<-s> or I<-U> flags on the command line is
illegal and will cause an error.  Also in this mode nbdkit does not
fork into the background (ie. I<-f> is implied).

=head2 Using socket activation with systemd

To use nbdkit with socket activation from systemd, create a unit file
ending in C<.socket> (eg. C</etc/systemd/system/nbdkit.socket>)
containing:

 [Unit]
 Description=NBDKit Network Block Device server
 
 [Socket]
 ListenStream=10809
 
 [Install]
 WantedBy=sockets.target

There are various formats for the C<ListenStream> key.  See
L<systemd.socket(5)> for more information.

Also create a service unit (eg. C</etc/systemd/system/nbdkit.service>)
containing:

 [Service]
 ExecStart=/usr/sbin/nbdkit file file=/path/to/serve

For more information on systemd and socket activation, see
L<http://0pointer.de/blog/projects/socket-activation.html>

=head1 CAPTIVE NBDKIT

You can run nbdkit as a "captive process", using the I<--run> option.
This means that nbdkit runs as long as (for example) L<qemu(1)> or
L<guestfish(1)> is running.  When those exit, nbdkit is killed.

Some examples should make this clear.

To run nbdkit captive under qemu:

 nbdkit file file=disk.img --run 'qemu -drive file=$nbd,if=virtio'

On the qemu command line, C<$nbd> is substituted automatically with
the right NBD path so it can connect to nbdkit.  When qemu exits,
nbdkit is killed and cleaned up automatically.

Running nbdkit captive under guestfish:

 nbdkit file file=disk.img --run 'guestfish --format=raw -a $nbd -i'

When guestfish exits, nbdkit is killed.

The following shell variables are available in the I<--run> argument:

=over 4

=item C<$nbd>

A URL that refers to the nbdkit port or socket.

Note there is some magic here, since qemu and guestfish URLs have a
different format, so nbdkit tries to guess which you are running.  If
the magic doesn't work, try using the variables below instead.

=item C<$port>

If E<ne> "", the port number that nbdkit is listening on.

=item C<$unixsocket>

If E<ne> "", the Unix domain socket that nbdkit is listening on.

=back

I<--run> implies I<--foreground>.  It is not possible, and probably
not desirable, to have nbdkit fork into the background when using
I<--run>.

Even when running captive, nbdkit still listens on the regular TCP/IP
port, unless you specify the I<-p>/I<-U> options.  If you want a truly
private captive nbdkit, then you should create a private random
Unix socket, like this:

 nbdkit -U - plugin [args] --run '...'

=head2 Copying data in and out of plugins with captive nbdkit

Captive nbdkit + L<qemu-img(1)> can be used to copy data into and out
of nbdkit plugins.  For example L<nbdkit-example1-plugin(1)> contains
an embedded disk image.  To copy it out:

 nbdkit -U - example1 --run 'qemu-img convert $nbd disk.img'

To overwrite a file inside an uncompressed tar file (the file being
overwritten must be the same size), use L<nbdkit-tar-plugin(1)> like
this:

 nbdkit -U - tar tar=data.tar file=disk.img \
   --run 'qemu-img convert -n disk.img $nbd'

=head1 EXIT WITH PARENT

The I<--exit-with-parent> option is almost the opposite of
L</CAPTIVE NBDKIT> described in the previous section.

Running nbdkit with this option, for example from a script:

 nbdkit --exit-with-parent plugin ... &

means that nbdkit will exit automatically if the parent program exits
for any reason.  This can be used to avoid complicated cleanups or
orphaned nbdkit processes.

I<--exit-with-parent> is incompatible with forking into the background
(because when we fork into the background we lose track of the parent
process).  Therefore I<-f> / I<--foreground> is implied.

This is currently implemented using a feature of the Linux kernel, so
it requires a Linux build of nbdkit and won't work on other operating
systems (patches welcome to make it work).

If the parent application is multithreaded, then (in the Linux
implementation) if the parent I<thread> exits, that will cause nbdkit
to exit.  Thus in multithreaded applications you usually want to run
C<nbdkit --exit-with-parent> only from the main thread (unless you
actually want nbdkit to exit with the thread, but that may not work
reliably if we extend the implementation to other operating systems).

=head1 NEW STYLE VS OLD STYLE PROTOCOL

The NBD protocol comes in two incompatible forms that we call
"oldstyle" and "newstyle".  Unfortunately which protocol you should
use depends on the client and cannot be known in advance, nor can it
be negotiated from the server side.

nbdkit currently defaults to the oldstyle protocol for compatibility
with qemu and libguestfs.  This is also the same behaviour as qemu-nbd
E<le> 2.5.  Use the I<-n> or I<--newstyle> flag on the command line to
use the newstyle protocol.  Use the I<-e> or I<--exportname> flag to
set the exportname for the newstyle protocol.  Use the I<-o> or
I<--oldstyle> flag to force the oldstyle protocol.

Some common clients and the protocol they require:

 Client                          Protocol
 ------------------------------------------------------------
 qemu <= 2.5 without exportname  oldstyle
 qemu <= 2.5 with exportname     newstyle
 qemu >= 2.6                     client can talk either protocol
 nbd-client < 3.10               client can talk either protocol
 nbd-client >= 3.10              newstyle
 any TLS (encrypted) client      newstyle
 nbdkit nbd plugin               client can talk either protocol

If you use qemu E<le> 2.5 without the exportname field against a
newstyle server, it will give the error:

 Server requires an export name

If you use qemu E<le> 2.5 with the exportname field against an
oldstyle server, it will give the error:

 Server does not support export names

If you use the oldstyle protocol with nbd-client E<ge> 3.10, it will
give the error:

 Error: It looks like you're trying to connect to an oldstyle server.

If you want to claim compatibility with what the NBD proto.txt
document says should be the case (which isn't based in reality), then
you should always use newstyle when using port 10809, and use oldstyle
on all other ports.

=head1 TLS

TLS (authentication and encryption, sometimes incorrectly called
"SSL") is supported if nbdkit was compiled with GnuTLS.  This allows
the server to verify that the client is allowed access, and to encrypt
the contents of the protocol in transit over the network.

TLS can be disabled or enabled by specifying either I<--tls=off> or
I<--tls=on>.  With I<--tls=off>, if a client tries to use TLS to
connect, it will be rejected by the server (in other words, as if the
server doesn't support TLS).

I<--tls=on> means that the client may choose to connect either with or
without TLS.

Because I<--tls=on> is subject to downgrade attacks where a malicious
proxy pretends not to support TLS in order to force either the client
or server to communicate in plaintext, you can also specify
I<--tls=require>, where the server enables TLS B<and> rejects all
non-TLS connection attempts.

=head2 TLS with X.509 certificates

When nbdkit starts up, it loads TLS certificates from some built-in
paths, or from the directory specified by the I<--tls-certificates>
option.

Without I<--tls-certificates>, if nbdkit is started as a non-root user
(note this does not include use of the I<-u> or I<-g> options), nbdkit
looks in each of these paths in turn:

 $HOME/.pki/nbdkit/
 $HOME/.config/pki/nbdkit/

Without I<--tls-certificates>, if nbdkit is started as root, nbkit
looks in:

 $sysconfdir/pki/nbdkit/

(Use C<nbdkit --dump-config> and look at the
C<root_tls_certificates_dir> setting to get the actual directory built
into the binary.)

You can override both directories above by using
I<--tls-certificates /path/to/certificates>.

In this directory, nbdkit expects to find several files:

=over 4

=item F<ca-cert.pem>

The Certificate Authority certificate.

=item F<server-cert.pem>

The server certificate.

=item F<server-key.pem>

The server private key.

=item F<ca-crl.pem>

(Optional) The certificate revocation list.

=back

=head3 Setting up the Certificate Authority

This step only needs to be done once per organization.  It may be that
your organization already has a CA.

 $ certtool --generate-privkey > ca-key.pem
 $ chmod 0600 ca-key.pem

The F<ca-key.pem> file is the CA private key and is I<extremely>
sensitive data.  With possession of this key, anyone can create
certificates pretending to be your organization!

To create the CA certificate file:

 $ cat > ca.info <<EOF
 cn = Name of your organization
 ca
 cert_signing_key
 EOF
 $ certtool --generate-self-signed \
            --load-privkey ca-key.pem \
            --template ca.info \
            --outfile ca-cert.pem

=head3 Issuing a server certificate for the nbdkit server

Each nbdkit server (or host) needs a secret key and certificate.

 $ certtool --generate-privkey > server-key.pem
 $ chmod 0600 server-key.pem

The server key file is sensitive.  Setting the mode to C<0600> helps
to prevent other users on the same machine from reading it.

The server DNS name (C<cn> below) must be the fully qualified hostname
— and the only hostname — that the client connects to.

 $ cat > server.info <<EOF
 organization = Name of your organization
 cn = nbd-server.example.com
 tls_www_server
 encryption_key
 signing_key
 EOF
 $ certtool --generate-certificate \
            --load-ca-certificate ca-cert.pem \
            --load-ca-privkey ca-key.pem \
            --load-privkey server-key.pem \
            --template server.info \
            --outfile server-cert.pem

=head3 Issuing and checking client certificates

B<Note:>
You don't need to create client certificates unless you want to check
and limit which clients can connect to nbdkit.  nbdkit B<does not>
check client certificates unless you specify the I<--tls-verify-peer>
option on the command line.

For each client you should generate a private key and a client
certificate:

 $ certtool --generate-privkey > client-key.pem
 $ chmod 0600 client-key.pem

The client key file is sensitive.

The client DNS name (C<cn> below) is the client's name that nbdkit
sees and checks.

 $ cat > client.info <<EOF
 country = US
 state = New York
 locality = New York
 organization = Name of your organization
 cn = client.example.com
 tls_www_client
 encryption_key
 signing_key
 EOF
 $ certtool --generate-certificate \
            --load-ca-certificate ca-cert.pem \
            --load-ca-privkey ca-key.pem \
            --load-privkey client-key.pem \
            --template client.info \
            --outfile client-cert.pem

Client certificates do I<not> need to be present anywhere on the
nbdkit host.  You don't need to copy them into nbdkit's TLS
certificates directory.  The security comes from the fact that the
client must present a client certificate signed by the Certificate
Authority, and nbdkit can check this because it has the F<ca-cert.pem>
file.

To enable checking of client certificates, specify the
I<--tls-verify-peer> option on the command line.  Clients which don't
present a valid certificate (eg. not signed, incorrect signature) are
denied.  Also denied are clients which present a valid certificate
signed by another CA.  Also denied are clients with certificates added
to the certificate revocation list (F<ca-crl.pem>).

=head2 Default TLS behaviour

If nbdkit was compiled without GnuTLS support, then TLS is disabled
and TLS connections will be rejected (as if I<--tls=off> was specified
on the command line).  Also it is impossible to turn on TLS in this
scenario.  You can tell if nbdkit was compiled without GnuTLS support
because C<nbdkit --dump-config> will contain C<tls=no>.

If TLS certificates cannot be loaded either from the built-in path or
from the directory specified by I<--tls-certificates>, then TLS
defaults to disabled.  Turning TLS on will give a warning
(I<--tls=on>) or error (I<--tls=require>) about the missing
certificates.

If TLS certificates can be loaded from the built-in path or from the
I<--tls-certificates> directory, then TLS will by default be enabled
(like I<--tls=on>), but it is not required.  Clients can choose
whether or not to use TLS and whether or not to present certificates.

TLS client certificates are I<not> checked by default unless you
specify I<--tls-verify-peer>.

Each of these defaults is insecure to some extent (including
I<--tls=on> which could be subject to a downgrade attack), so if you
expect TLS then it is best to specify the I<--tls> option that you
require, and if you want to check client certificates, specify the
I<--tls-verify-peer> option.

=head2 Choice of TLS algorithms

TLS has a bewildering choice of algorithms that can be used.  To
enable you to choose a default set of algorithms, there is a configure
setting C<--with-tls-priority>.  This defaults to C<NORMAL> which, to
quote the GnuTLS documentation:

=over 4

"C<NORMAL> means all C<secure> ciphersuites.  The 256-bit ciphers are
included as a fallback only.  The ciphers are sorted by security
margin."

=back

You could also set the TLS priority so that it can be configured from
a file at runtime:

 ./configure --with-tls-priority=@SYSTEM

means use the policy from F</etc/crypto-policies/config>.

 ./configure --with-tls-priority=@NBDKIT,SYSTEM

means use the policy from
F</etc/crypto-policies/local.d/nbdkit.config> and fall back to
F</etc/crypto-policies/config> if the first file does not exist.

More information can be found in L<gnutls_priority_init(3)>.

=head1 PROBING CONFIGURATION AND PLUGINS

You can query information about nbdkit and available plugins from the
nbdkit binary.

=head2 Query basic configuration

 nbdkit --dump-config

lists information about how nbdkit was configured.  The most important
fields in the output are the name of the directory where nbdkit looks
for plugins and the version of nbdkit, eg:

 plugindir=/usr/lib64/nbdkit/plugins
 version=1.2.3

=head2 Query information about a particular plugin

 nbdkit pluginname --dump-plugin

(where I<pluginname> is the name or full path of a plugin) will dump
information about that plugin, eg:

 $ nbdkit file --dump-plugin
 path=/usr/lib64/nbdkit/plugins/nbdkit-file-plugin.so
 name=file
 version=1.2.3
 api_version=1
 struct_size=176
 thread_model=serialize_requests
 [etc]

Plugins which ship with nbdkit usually have the same version as the
corresponding nbdkit binary.

=head2 Detect if a plugin is installed

To find out if a plugin is installed (and working) in the plugin
directory, use I<--dump-plugin> as above:

 $ nbdkit foo --dump-plugin
 nbdkit: /usr/lib64/nbdkit/plugins/nbdkit-foo-plugin.so: /usr/lib64/nbdkit/plugins/nbdkit-foo-plugin.so: cannot open shared object file: No such file or directory

Note it is better to test for the existence of plugins this way rather
than just seeing if the F<.so> file exists, because nbdkit will load
the plugin and check that all its dependencies can be satisfied, and
also that plugin registration works.

=head2 List all plugins in the plugin directory

You could simply get the plugin directory (from I<--dump-config>) and
list all files in this directory called F<nbdkit-*-plugin.so>.

However a better test is to run I<--dump-plugin> (see above) on each
one to check that it is working and all of its dependencies are
installed.  A complete shell script which does this is:

 #!/bin/sh -
 plugindir=`nbdkit --dump-config | grep ^plugindir= | sed 's/[^=]*=//'`
 for f in $plugindir/nbdkit-*-plugin.so; do
     if nbdkit "$f" --dump-plugin >/dev/null 2>&1; then
         b=`echo "$f" | sed 's,.*/nbdkit-\(.*\)-plugin.so$,\1,'`
         echo "$b ($f)"
     fi
 done

=head1 SIGNALS

C<nbdkit> responds to the following signals:

=over 4

=item C<SIGINT>

=item C<SIGQUIT>

=item C<SIGTERM>

The server exits cleanly.

=item C<SIGPIPE>

This signal is ignored.

=back

=head1 ENVIRONMENT VARIABLES

=over 4

=item C<LISTEN_FDS>

=item C<LISTEN_PID>

If present in the environment when nbdkit starts up, these trigger
L</SOCKET ACTIVATION>.

=back

=head1 SEE ALSO

Plugins:

L<nbdkit-curl-plugin(1)>,
L<nbdkit-example1-plugin(1)>,
L<nbdkit-example2-plugin(1)>,
L<nbdkit-example3-plugin(1)>,
L<nbdkit-example4-plugin(1)>,
L<nbdkit-file-plugin(1)>,
L<nbdkit-guestfs-plugin(1)>,
L<nbdkit-gzip-plugin(1)>,
L<nbdkit-libvirt-plugin(1)>,
L<nbdkit-memory-plugin(1)>,
L<nbdkit-nbd-plugin(1)>,
L<nbdkit-null-plugin(1)>,
L<nbdkit-split-plugin(1)>,
L<nbdkit-streaming-plugin(1)>,
L<nbdkit-tar-plugin(1)>,
L<nbdkit-vddk-plugin(1)>,
L<nbdkit-xz-plugin(1)>.

Filters:

L<nbdkit-cache-filter(1)>,
L<nbdkit-cow-filter(1)>,
L<nbdkit-delay-filter(1)>,
L<nbdkit-offset-filter(1)>,
L<nbdkit-partition-filter(1)>.

For developers:

L<nbdkit-plugin(3)>,
L<nbdkit-filter(3)>.

Writing plugins in other programming languages:

L<nbdkit-ocaml-plugin(3)>,
L<nbdkit-perl-plugin(3)>,
L<nbdkit-python-plugin(3)>,
L<nbdkit-ruby-plugin(3)>.

Other manual pages of interest:

L<gnutls_priority_init(3)>,
L<guestfish(1)>,
L<qemu(1)>,
L<qemu-img(1)>,
L<systemd.socket(5)>.

=head1 AUTHORS

Eric Blake

Richard W.M. Jones

Pino Toscano

=head1 COPYRIGHT

Copyright (C) 2013-2018 Red Hat Inc.

=head1 LICENSE

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

=over 4

=item *

Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.

=item *

Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.

=item *

Neither the name of Red Hat nor the names of its contributors may be
used to endorse or promote products derived from this software without
specific prior written permission.

=back

THIS SOFTWARE IS PROVIDED BY RED HAT AND CONTRIBUTORS ''AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL RED HAT OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
