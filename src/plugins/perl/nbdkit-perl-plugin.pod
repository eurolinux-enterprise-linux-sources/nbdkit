=encoding utf8

=head1 NAME

nbdkit-perl-plugin - nbdkit perl plugin

=head1 SYNOPSIS

 nbdkit perl /path/to/plugin.pl [arguments...]

=head1 DESCRIPTION

C<nbdkit-perl-plugin> is an embedded Perl interpreter for
L<nbdkit(1)>, allowing you to write nbdkit plugins in Perl.

Broadly speaking, Perl nbdkit plugins work like C ones, so you should
read L<nbdkit-plugin(3)> first.

=head2 USING A PERL NBDKIT PLUGIN

Assuming you have a Perl script which is an nbdkit plugin, you run it
like this:

 nbdkit perl /path/to/plugin.pl

You may have to add further C<key=value> arguments to the command
line.  Read the Perl script to see if it requires any.

=head1 WRITING A PERL NBDKIT PLUGIN

There is an example Perl nbdkit plugin called C<example.pl> which
ships with the nbdkit source.

To write a Perl nbdkit plugin, you create a Perl file which contains
at least the following required subroutines:

 sub open
 {
   # see below
 }
 sub get_size
 {
   # see below
 }
 sub pread
 {
   # see below
 }

Note that the subroutines must have those literal names (like
C<open>), because the C part looks up and calls those functions
directly.  You may want to include documentation and globals (eg. for
storing global state).  Also any top-level statements, C<BEGIN>
statements, C<END> statements and so on are run when nbdkit starts up
and shuts down, just like ordinary Perl.

=head2 EXECUTABLE SCRIPT

If you want you can make the script executable and include a "shebang"
at the top:

 #!/usr/sbin/nbdkit perl

See also L<nbdkit(1)/Shebang scripts>.

These scripts can also be installed in the C<$plugindir>.  See
L<nbdkit-plugin(3)/WRITING PLUGINS IN OTHER PROGRAMMING LANGUAGES>.

=head2 METHODS

Your script has access to the following methods in the C<Nbdkit>
package (in fact, attempting to C<use Nbdkit> will fail, the methods
are already available):

 Nbdkit::set_error($err);

Record C<$err> as the reason you are about to throw an exception. C<$err>
should correspond to usual errno values, where it may help to
C<use POSIX()>.

=head2 EXCEPTIONS

Instead of returning error codes as in C, Perl callbacks should
indicate problems by throwing Perl exceptions (ie. C<die>, C<croak>
etc).  The Perl error message is captured and printed by nbdkit.
Remember to use C<Nbdkit::set_error> if you need to control which
error is sent back to the client; if omitted, the client will see an
error of C<EIO>.

=head2 32 vs 64 BIT

It is likely that Perl plugins won't work well, or maybe won't work at
all, on 32 bit platforms.  This is simply because Perl doesn't have an
easy way to use 64 bit integers on 32 bit platforms, and 64 bit
integers (eg. file offsets, disk sizes) are required for many nbdkit
operations.

=head2 PERL CALLBACKS

This just documents the arguments to the callbacks in Perl, and any
way that they differ from the C callbacks.  In all other respects they
work the same way as the C callbacks, so you should go and read
L<nbdkit-plugin(3)>.

=over 4

=item C<dump_plugin>

(Optional)

There are no arguments or return value.

=item C<config>

(Optional)

 sub config
 {
     my $key = shift;
     my $value = shift;
     # No return value.
 }

=item C<config_complete>

(Optional)

There are no arguments or return value.

=item C<open>

(Required)

 sub open
 {
     my $readonly = shift;
     my $handle = {};
     return $handle;
 }

The C<readonly> flag is a boolean.

You can return any Perl value as the handle.  It is passed back to
subsequent calls.  It's usually convenient to use a hashref, since
that lets you store arbitrary fields.

=item C<close>

(Optional)

 sub close
 {
     my $handle = shift;
     # No return value
 }

After C<close> returns, the reference count of the handle is
decremented in the C part, which usually means that the handle and its
contents will be garbage collected.

=item C<get_size>

(Required)

 sub get_size
 {
     my $handle = shift;
     my $i64 = .. the size of the disk ..;
     return $i64;
 }

This returns the size of the disk.  You can return any Perl object
that evaluates to an integer.

=item C<can_write>

(Optional)

 sub can_write
 {
     my $handle = shift;
     my $bool = ...;
     return $bool;
 }

Return a boolean indicating whether the disk is writable.

=item C<can_flush>

(Optional)

 sub can_flush
 {
     my $handle = shift;
     my $bool = ...;
     return $bool;
 }

Return a boolean indicating whether flush can be performed.

=item C<is_rotational>

(Optional)

 sub is_rotational
 {
     my $handle = shift;
     my $bool = ...;
     return $bool;
 }

Return a boolean indicating whether the disk is rotational.

=item C<can_trim>

(Optional)

 sub can_trim
 {
     my $handle = shift;
     my $bool = ...;
     return $bool;
 }

Return a boolean indicating whether trim/discard can be performed.

=item C<pread>

(Required)

 sub pread
 {
    my $handle = shift;
    my $count = shift;
    my $offset = shift;
    # Construct a buffer of length $count bytes and return it.
    return $buf;
 }

The body of your C<pread> function should construct a buffer of length
(at least) C<$count> bytes.  You should read C<$count> bytes from the
disk starting at C<$offset>.

NBD only supports whole reads, so your function should try to read the
whole region (perhaps requiring a loop).  If the read fails or is
partial, your function should C<die>, optionally using
C<Nbdkit::set_error> first.

=item C<pwrite>

(Optional)

 sub pwrite
 {
    my $handle = shift;
    my $buf = shift;
    my $count = length ($buf);
    my $offset = shift;
    # No return value
 }

The body of your C<pwrite> function should write the C<$buf> string to
the disk.  You should write C<$count> bytes to the disk starting at
C<$offset>.

NBD only supports whole writes, so your function should try to write
the whole region (perhaps requiring a loop).  If the write fails or is
partial, your function should C<die>, optionally using
C<Nbdkit::set_error> first.

=item C<flush>

(Optional)

 sub flush
 {
     my $handle = shift;
     # No return value
 }

The body of your C<flush> function should do a L<sync(2)> or
L<fdatasync(2)> or equivalent on the backing store.

If there is an error, the function should call C<die>, optionally using
C<Nbdkit::set_error> first.

=item C<trim>

(Optional)

 sub trim
 {
     my $handle = shift;
     my $count = shift;
     my $offset = shift;
     # No return value
 }

The body of your C<trim> function should "punch a hole" in the backing
store.

If there is an error, the function should call C<die>, optionally using
C<Nbdkit::set_error> first.

=item C<zero>

(Optional)

 sub zero
 {
    my $handle = shift;
    my $count = shift;
    my $offset = shift;
    my $may_trim = shift;
    # No return value
 }

The body of your C<zero> function should ensure that C<$count> bytes
of the disk, starting at C<$offset>, will read back as zero.  If
C<$may_trim> is true, the operation may be optimized as a trim as long
as subsequent reads see zeroes.

NBD only supports whole writes, so your function should try to write
the whole region (perhaps requiring a loop).  If the write fails or is
partial, your function should C<die>, optionally using
C<Nbdkit::set_error> first.  In particular, if you would like to
automatically fall back to C<pwrite> (perhaps because there is nothing
to optimize if C<$may_trim> is false), use
C<Nbdkit::set_error(POSIX::EOPNOTSUPP)>.

=back

=head2 MISSING CALLBACKS

=over 4

=item Missing: C<load> and C<unload>

These are not needed because you can just use regular Perl C<BEGIN>
and C<END> constructs.

=item Missing: C<name>, C<version>, C<longname>, C<description>, C<config_help>

These are not yet supported.

=back

=head2 THREADS

The thread model for Perl callbacks currently cannot be set from Perl.
It is hard-coded in the C part to
C<NBDKIT_THREAD_MODEL_SERIALIZE_ALL_REQUESTS>.  This may change or be
settable in future.

=head1 SEE ALSO

L<nbdkit(1)>,
L<nbdkit-plugin(3)>,
L<perl(1)>.

=head1 AUTHORS

Richard W.M. Jones

=head1 COPYRIGHT

Copyright (C) 2013-2014 Red Hat Inc.

=head1 LICENSE

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

=over 4

=item *

Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.

=item *

Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.

=item *

Neither the name of Red Hat nor the names of its contributors may be
used to endorse or promote products derived from this software without
specific prior written permission.

=back

THIS SOFTWARE IS PROVIDED BY RED HAT AND CONTRIBUTORS ''AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL RED HAT OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
